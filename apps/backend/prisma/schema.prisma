// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  firstName     String?
  lastName      String?
  phone         String?
  role          Role     @default(CUSTOMER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  quizResults   QuizResult[]
  addresses     Address[]
  inventoryLogs InventoryLog[]
  
  // Admin fields
  isActive      Boolean  @default(true)
  lastLogin     DateTime?

  @@map("users")
}

enum Role {
  CUSTOMER
  ADMIN
  MANAGER
  SUPER_ADMIN
}

// Address model
model Address {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fullName      String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String
  phone         String
  isDefault     Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  orders        Order[]

  @@map("addresses")
}

// Product model
model Product {
  id              String   @id @default(uuid())
  name            String
  slug            String   @unique
  description     String
  shortDescription String?
  price           Decimal  @db.Decimal(10, 2)
  compareAtPrice  Decimal? @db.Decimal(10, 2)
  
  category        String
  tags            String[]
  
  // Product details
  servingSize     String
  servingsPerContainer Int
  features        String[]
  dietaryInfo     String[]
  
  // Inventory
  sku             String   @unique
  inStock         Boolean  @default(true)
  stockQuantity   Int      @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Stats
  rating          Decimal? @db.Decimal(3, 2)
  reviewCount     Int      @default(0)
  
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  ingredients     Ingredient[]
  supplementFacts SupplementFact[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]
  inventoryLogs   InventoryLog[]

  @@map("products")
}

// Ingredient model
model Ingredient {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  name        String
  amount      String
  benefit     String
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())

  @@map("ingredients")
}

// Supplement Facts model
model SupplementFact {
  id            String   @id @default(uuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  nutrient      String
  amount        String
  dailyValue    String?
  order         Int      @default(0)
  
  createdAt     DateTime @default(now())

  @@map("supplement_facts")
}

// Cart model
model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  items     CartItem[]

  @@map("carts")
}

// Cart Item model
model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  quantity  Int      @default(1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Order model
model Order {
  id              String      @id @default(uuid())
  orderNumber     String      @unique
  
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  addressId       String
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  
  // Order totals
  subtotal        Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  
  // Payment info
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  
  // Order status
  status          OrderStatus @default(PENDING)
  
  // Tracking
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  notes           String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  items           OrderItem[]

  @@map("orders")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Order Item model
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  
  createdAt DateTime @default(now())

  @@map("order_items")
}

// Review model
model Review {
  id        String   @id @default(uuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  rating    Int      // 1-5
  title     String?
  comment   String
  
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  helpfulVotes ReviewHelpfulVote[]

  @@unique([userId, productId])
  @@map("reviews")
}

// Review Helpful Vote model
model ReviewHelpfulVote {
  id        String   @id @default(uuid())
  
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  userId    String
  
  createdAt DateTime @default(now())

  @@unique([reviewId, userId])
  @@map("review_helpful_votes")
}

// Quiz Result model
model QuizResult {
  id                String   @id @default(uuid())
  
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Quiz data
  answers           Json     // Store quiz answers as JSON
  results           Json     // Store recommendations as JSON
  score             Json     // Store scoring data as JSON
  
  // Profile data from quiz
  fitnessGoal       String?  // weight_loss, muscle_gain, general_health, etc.
  activityLevel     String?  // sedentary, moderate, active, very_active
  dietaryPreference String?  // omnivore, vegetarian, vegan, etc.
  
  // Recommended products (for quick access)
  recommendedProductIds String[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("quiz_results")
}

// Inventory Log model
model InventoryLog {
  id          String        @id @default(uuid())
  
  productId   String
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  
  type        InventoryType
  quantity    Int           // Positive for additions, negative for reductions
  
  previousQty Int
  newQty      Int
  
  reason      String?
  notes       String?
  
  createdAt   DateTime      @default(now())

  @@map("inventory_logs")
}

enum InventoryType {
  PURCHASE      // Stock purchased from supplier
  SALE          // Sold to customer
  RETURN        // Customer return
  ADJUSTMENT    // Manual adjustment
  DAMAGED       // Damaged goods
  EXPIRED       // Expired items
  RESTOCK       // Restocking
}
