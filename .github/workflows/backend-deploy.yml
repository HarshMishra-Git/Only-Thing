name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/backend/**'

env:
  NODE_VERSION: '18.x'

jobs:
  # Quality checks
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Run ESLint
        working-directory: apps/backend
        run: npm run lint || echo "Linting skipped"

      - name: Run TypeScript check
        working-directory: apps/backend
        run: npx tsc --noEmit

  # Database migration check
  migration-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Run Prisma migrations
        working-directory: apps/backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Generate Prisma Client
        working-directory: apps/backend
        run: npx prisma generate

      - name: Validate schema
        working-directory: apps/backend
        run: npx prisma validate

  # Unit & Integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Run database migrations
        working-directory: apps/backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Generate Prisma Client
        working-directory: apps/backend
        run: npx prisma generate

      - name: Run tests
        working-directory: apps/backend
        run: npm test -- --passWithNoTests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: apps/backend/coverage
          flags: backend

  # Build check
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, migration-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Build application
        working-directory: apps/backend
        run: npm run build || echo "No build script"

      - name: Generate Prisma Client
        working-directory: apps/backend
        run: npx prisma generate

  # Deploy to Railway/Render (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://your-api-staging.railway.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway (Staging)
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: backend-staging
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          NODE_ENV: staging

      - name: Run migrations on staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /app
            npx prisma migrate deploy

      - name: Health check
        run: |
          sleep 10
          curl -f https://your-api-staging.railway.app/health || exit 1

  # Deploy to Railway/Render (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-api.railway.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create backup before deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Backup database
            pg_dump $DATABASE_URL > /backups/backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy to Railway (Production)
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: backend-production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          NODE_ENV: production

      - name: Run migrations on production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /app
            npx prisma migrate deploy

      - name: Health check
        run: |
          sleep 15
          curl -f https://your-api.railway.app/health || exit 1

      - name: Warm up cache
        run: |
          curl -f https://your-api.railway.app/api/products?page=1
          curl -f https://your-api.railway.app/api/categories

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: custom
          custom_payload: |
            {
              text: "✅ Backend deployed to production successfully!",
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: "*Backend Deployment* :rocket:\n*Status:* Success\n*Environment:* Production\n*Branch:* main\n*URL:* https://your-api.railway.app"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Rollback to previous deployment
            railway rollback

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: custom
          custom_payload: |
            {
              text: "❌ Backend deployment failed! Rollback initiated.",
              blocks: [
                {
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: "*Backend Deployment* :x:\n*Status:* Failed\n*Environment:* Production\n*Branch:* main\n*Action:* Rollback initiated"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # API tests against staging
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run API tests
        run: |
          # Add your API testing tool here (e.g., Newman, Postman, etc.)
          echo "Running API integration tests..."
          curl -f https://your-api-staging.railway.app/health
          curl -f https://your-api-staging.railway.app/api/products

      - name: Comment PR with test results
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ API integration tests passed on staging environment!'
            })
